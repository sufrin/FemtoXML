package femtoXML;

import java.io.Reader;

/** 
 * An XMLHandler receives and handles the lexical events generated by scanning an XML document.
 * 
 * @author sufrin
 *
 */

public interface XMLHandler
{ /** Called just after the start tag (and attributes) of an element have been scanned. */
  public void startElement(String kind, XMLAttributes atts);        // <kind attr1="val1" ...
  
  /**
   * Called just after the end tag of an element has been scanned. This is also
   * called immediately after <code>startElement</code> when an empty element
   * is encountered; in other words, we do not distinguish between
   * 
   * <pre>
   * &lt;foo .../&gt; and &lt;foo ...&gt;&lt;/foo&gt;
   * </pre>
   */
  public void endElement(String kind); // </kind>

  /** Called just after the closing bracket of a comment has been scanned */
  public void commentCharacters(CharSequence text);                // <!-- ... -->
  
  /**
   * Called just after the closing bracket of a processing-instruction (or the
   * initial
   * <code>
   * &lt;?XML ... ?&gt;
   * </code> declaration)
   * has been scanned. We do not interpret the internal structure of a
   * processing instruction.
   */
  public void PICharacters(CharSequence text); // <? ... ?>

  /**
   * Called just after the closing bracket of the DOCTYPE declaration. We do not interpret the internal
   * structure of the declaration.
   */
  public void DOCTYPECharacters(CharSequence text); // <? ... ?>

  /**
   * Handle non-element text; <code>cdata</code> is true if the text is a
   * <code>
   * &lt;![CDATA[ ...]]&gt;
   * </code> element.
   */
  public void contentCharacters(CharSequence text, boolean cdata); // ...
  
  /**
   * Handle non-element spaces.
   */
  public void    spaceCharacters(CharSequence text); 
  
  /** Returns true if the handler wants to see spaces.
   */
  public boolean wantSpaces();
  
  /** Returns true if the handler wants to see comments.
   */
  public boolean wantComment();
  
  /** Returns true if the handler wants to see PI.
   */
  public boolean wantPI();
  
  /** Returns true if the handler wants to see DOCTYPE declaration.
   */
  public boolean wantDOCTYPE();
  
  /** Called just before document starts to be consumed */
  public void startDocument();
  
  /** Called just after the end of a document stream. */
  public void endDocument();
  
  /**
   * Called when a non-standard <code>&amp;entityName;</code> is scanned.
   * Should return a <code>Reader</code> that will yield the characters of the
   * expansion of the entity if it is known, and <code>null</code> otherwise.
   */
  public Reader decodeEntity(String entityName); // &entityname;
  
  /**
   * Called before decodeEntity when a non-standard
   * <code>&amp;entityName;</code> is scanned. Should return a
   * <code>Character</code> if it is known, and <code>null</code> otherwise.
   */
  public char decodeCharEntity(String entityName); // &entityname;
  
  /**
   * Called by an <code>XMLScanner</code> before <code>startDocument</code>
   * to give this handler access to the current location in the source text.
   * 
   * @param loc --
   *          a locator
   */
  public void setLocator(XMLLocator loc);
  
  /**
   * 
   * A locator is an indication of a position within a file.
   *
   */
  public static interface XMLLocator
  {  
     /**
      * @return the current line number
      */ 
     int   lineNumber();
     
     /**
       * @return a description of the current source (usually its path)
       */
    String getDescription();
  }
  
  /** Called just after the opening  <code>&lt;name</code> of an element is scanned. 
   * @param expandEntities -- true if entities are bneing expanded by the scanner
   * @return -- a new <code>XMLAttributes</code> object to store the entitities for this element
   */
  public XMLAttributes newAttributes(boolean expandEntities);
}
